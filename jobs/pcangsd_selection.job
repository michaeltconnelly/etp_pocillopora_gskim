#!/bin/sh
# ----------------Parameters---------------------- #
#$ -S /bin/sh
#$ -pe mthread 16
#$ -q mThM.q
#$ -l mres=192G,h_data=12G,h_vmem=12G,himem
#$ -cwd
#$ -j y
#$ -N pcangsd
#$ -o pcangsd.log
#$ -m bea
#$ -M connellym@si.edu
#
# ----------------Modules------------------------- #
module load bioinformatics/pcangsd
#
# ----------------Your Commands------------------- #

echo + `date` job $JOB_NAME started in $QUEUE with jobID=$JOB_ID on $HOSTNAME
echo + NSLOTS = $NSLOTS

#specify variable containing sequence file prefixes and directory paths
mcs="/scratch/nmnh_corals/connellym"
prodir="/scratch/nmnh_corals/connellym/projects/etp_pocillopora_gskim"

# Filter for SNPs to test for selection with ANGSD
# making a list of sample names
set=$1
#files=$(ls /scratch/nmnh_corals/connellym/projects/etp_pocillopora_gskim/data/raw/)
#samples=$(echo "$files" | cut -d . -f 1 | sort -u)
samples=$(cat ${prodir}/data/${set}_samples.txt)

# creating an output directory for set output files
if [ ! -d "${prodir}/outputs/angsd/${set}" ]; then mkdir ${prodir}/outputs/angsd/${set}; fi

# assign variable for output directory
setdir="${prodir}/outputs/angsd/${set}"

# making a list of bam file paths
ls ${prodir}/outputs/alignments/*md.rg.bam | grep -f ${prodir}/data/${set}_samples.txt > ${setdir}/${set}_bamfile.txt

# verify samples are correct
echo " These are the samples to be processed: ${samples}, there are $(cat ${setdir}/${set}_bamfile.txt | wc -l) in total"

# assign variable to bamfile
BAMS=${setdir}/${set}_bamfile.txt

# from https://github.com/z0on/ClonesAndClades_Ofav_Keys/blob/master/read_processing_walkthrough.txt
# Manzello et al. 2018

#FILTERS:
# (ALWAYS record your filter settings and explore different combinations to confirm that results are robust. )
# Suggested filters :
# -snp_pval 1e-5 : high confidence that the SNP is not just sequencing error 
# -minMaf 0.05 : only common SNPs, with allele frequency 0.05 or more.
# set minInd to 85% of total number of samples
nsamps=$(cat $BAMS | wc -l) 
minindv=$(echo "$nsamps*0.85" | bc | awk '{print int($1+0.5)}')
# also adding  filters against very badly non-HWE sites (such as, all calls are heterozygotes => lumped paralog situation) and sites with really bad strand bias:
FILTERS="-uniqueOnly 1 -remove_bads 1 -minMapQ 30 -minQ 30 -dosnpstat 1 -doHWE 1 -sb_pval 1e-5 -hetbias_pval 1e-5 -skipTriallelic 1 -minInd $minindv -snp_pval 1e-5 -minMaf 0.05"

#TODO: 
# -GL 1 : use samtools likelihood model
# -doMajorMinor 1 : infer major and minor alleles from genotype likelihoods (-skipTriallelic 1 : skip tri-allelic sites)
# -doMaf 1 : estimate allele frequency w/ fixed major and minor alleles 
# -doCounts 1 : count the number A,C,G,T. All sites, All samples
# -makeMatrix 1 -doIBS 1 -doCov 1 : identity-by-state and covariance matrices based on single-read resampling (robust to variation in coverage across samples)
# -doGeno 8 : bgenotype likelihoods format for ngsLD
# -doPost 1 : calculate posterior allele frequencies using frequency as prior
# -doGlf 2 : output beagle format (for admixture and selection)
TODO="-doMajorMinor 1 -doMaf 1 -doCounts 1 -makeMatrix 1 -doIBS 1 -doCov 1 -doGeno 8 -doPost 1 -doGlf 2"

# assign variable to sites and chrs files (sorted and indexed)
SITES=${setdir}/${set}_noLD_sorted_v3.sites.txt
CHRS=${setdir}/${set}_noLD.SczhEnG_v3.txt 

angsd -sites $SITES -rf $CHRS -b $BAMS -GL 1 $FILTERS $TODO -P $NSLOTS -out ${setdir}/${set}_noLD_filtered

# how many SNPs?
zcat ${setdir}/${set}_noLD_filtered.mafs.gz | wc -l

# ----- Selection scans with PCangsd
pcangsd \
-beagle ${prodir}/outputs/angsd/${set}/${set}_noLD_filtered.beagle.gz \
-o ${prodir}/outputs/angsd/${set}/${set}_noLD \
--selection \
--admix \
-threads $NSLOTS
# --pcadapt

# Outputs the following files:
# log-file (pcangsd.log)
# covariance matrix (pcangsd.cov)
# selection statistics (pcangsd.selection)
# admixture proportions (pcangsd.admix.3.Q)
# ancestral allele frequencies (pcangsd.admix.3.F)

#
# In the newer version of PCAngsd, you can still perform selection scans for more PCs by using "--selection_e INT"

echo = `date` job $JOB_NAME done